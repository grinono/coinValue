{"version":3,"file":"0.47cfe7c8e0a0ae467e84.hot-update.js","sources":["/Users/bartelverkruijssen/Google Drive/Talqs/Talqs General/development/investCoin/apollo-universal-starter-kit-master/src/client/modules/common/components/Button.jsx","/Users/bartelverkruijssen/Google Drive/Talqs/Talqs General/development/investCoin/apollo-universal-starter-kit-master/src/client/modules/common/components/LayoutCenter.jsx","/Users/bartelverkruijssen/Google Drive/Talqs/Talqs General/development/investCoin/apollo-universal-starter-kit-master/src/client/modules/common/components/index.jsx","/Users/bartelverkruijssen/Google Drive/Talqs/Talqs General/development/investCoin/apollo-universal-starter-kit-master/src/server/middleware/website.jsx","/Users/bartelverkruijssen/Google Drive/Talqs/Talqs General/development/investCoin/apollo-universal-starter-kit-master/external \"react-native-web\""],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ children, onPress, disabled }) => {\n  const { buttonStyle, textStyle } = styles;\n\n  return (\n    <TouchableOpacity onPress={onPress} style={buttonStyle} activeOpacity={disabled ? 0.5 : 1}>\n      <Text style={textStyle}>{children}</Text>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttonStyle: {\n    backgroundColor: '#0275d8',\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10\n  },\n  textStyle: {\n    alignSelf: 'center',\n    color: '#FFF',\n    fontSize: 16,\n    fontWeight: '600',\n    paddingTop: 10,\n    paddingBottom: 10\n  }\n});\n\nButton.propTypes = {\n  children: PropTypes.node,\n  onPress: PropTypes.func,\n  disabled: PropTypes.bool\n};\n\nexport default Button;\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/common/components/Button.jsx","// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { View, StyleSheet } from 'react-native';\n//\n// const LayoutCenter = ({ children }) => {\n//   const { container, layout, offset, content, column } = styles;\n//\n//   return (\n//     <View style={container}>\n//       <View style={layout}>\n//         <View style={offset} />\n//         <View style={content}>\n//           <View style={column}>{children}</View>\n//         </View>\n//         <View style={offset} />\n//       </View>\n//     </View>\n//   );\n// };\n//\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1\n//   },\n//   layout: {\n//     flex: 1,\n//     flexDirection: 'row',\n//     justifyContent: 'center',\n//     alignItems: 'center'\n//   },\n//   column: {\n//     flex: 1,\n//     flexDirection: 'column',\n//     justifyContent: 'center',\n//     alignItems: 'stretch'\n//   },\n//   content: {\n//     flexGrow: 3\n//   },\n//   offset: {\n//     flexGrow: 3\n//   }\n// });\n//\n// LayoutCenter.propTypes = {\n//   children: PropTypes.node\n// };\n//\n// export default LayoutCenter;\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/common/components/LayoutCenter.jsx","// eslint-disable-next-line import/prefer-default-export\nexport { default as Button } from './Button';\nexport { default as LayoutCenter } from './LayoutCenter';\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/common/components/index.jsx","import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { createApolloFetch } from 'apollo-fetch';\nimport { ApolloLink } from 'apollo-link';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { Provider } from 'react-redux';\nimport { StaticRouter } from 'react-router';\nimport { ServerStyleSheet } from 'styled-components';\nimport { LoggingLink } from 'apollo-logger';\n// import { addPersistedQueries } from 'persistgraphql';\nimport fs from 'fs';\nimport path from 'path';\nimport Helmet from 'react-helmet';\nimport url from 'url';\nimport { AppRegistry } from 'react-native';\n\nimport createApolloClient from '../../common/createApolloClient';\nimport createReduxStore from '../../common/createReduxStore';\nimport Html from './html';\nimport Routes from '../../client/app/Routes';\nimport modules from '../modules';\nimport { options as spinConfig } from '../../../.spinrc.json';\nimport settings from '../../../settings';\n\nlet assetMap;\n\nconst { protocol, hostname, port, pathname } = url.parse(__BACKEND_URL__);\nconst apiUrl = `${protocol}//${hostname}:${process.env.PORT || port}${pathname}`;\n\nconst renderServerSide = async (req, res) => {\n  // if (__PERSIST_GQL__) {\n  //   networkInterface = addPersistedQueries(networkInterface, queryMap);\n  // }\n  //\n\n  const fetch = createApolloFetch({ uri: apiUrl, constructOptions: modules.constructFetchOptions });\n  fetch.batchUse(({ options }, next) => {\n    options.credentials = 'include';\n    options.headers = req.headers;\n\n    next();\n  });\n  const cache = new InMemoryCache();\n\n  let link = new BatchHttpLink({ fetch });\n\n  const client = createApolloClient({\n    link: ApolloLink.from((settings.app.logging.apolloLogging ? [new LoggingLink()] : []).concat([link])),\n    cache\n  });\n\n  let initialState = {};\n  const store = createReduxStore(initialState, client);\n\n  const context = {};\n  const clientModules = require('../../client/modules').default;\n  const App = () =>\n    clientModules.getWrappedRoot(\n      <Provider store={store}>\n        <ApolloProvider client={client}>\n          <StaticRouter location={req.url} context={context}>\n            {Routes}\n          </StaticRouter>\n        </ApolloProvider>\n      </Provider>,\n      req\n    );\n\n  AppRegistry.registerComponent('App', () => App);\n  const { element, stylesheets } = AppRegistry.getApplication('App', {});\n\n  await getDataFromTree(element);\n\n  if (context.pageNotFound === true) {\n    res.status(404);\n  } else {\n    res.status(200);\n  }\n\n  const sheet = new ServerStyleSheet();\n  const html = ReactDOMServer.renderToString(sheet.collectStyles(element));\n  const css = sheet\n    .getStyleElement()\n    .concat(stylesheets)\n    .map((el, idx) => React.cloneElement(el, { key: idx }));\n  const helmet = Helmet.renderStatic(); // Avoid memory leak while tracking mounted instances\n\n  if (context.url) {\n    res.writeHead(301, { Location: context.url });\n    res.end();\n  } else {\n    if (__DEV__ || !assetMap) {\n      assetMap = JSON.parse(fs.readFileSync(path.join(spinConfig.frontendBuildDir, 'web', 'assets.json')));\n    }\n\n    const apolloState = Object.assign({}, cache.extract());\n\n    const token = req.universalCookies.get('x-token') ? req.universalCookies.get('x-token') : null;\n    const refreshToken = req.universalCookies.get('x-refresh-token')\n      ? req.universalCookies.get('x-refresh-token')\n      : null;\n\n    const page = (\n      <Html\n        content={html}\n        state={apolloState}\n        assetMap={assetMap}\n        css={css}\n        helmet={helmet}\n        token={token}\n        refreshToken={refreshToken}\n      />\n    );\n    res.send(`<!doctype html>\\n${ReactDOMServer.renderToStaticMarkup(page)}`);\n    res.end();\n  }\n};\n\nexport default queryMap => async (req, res, next) => {\n  try {\n    if (req.url.indexOf('.') < 0 && __SSR__) {\n      return await renderServerSide(req, res, queryMap);\n    } else {\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// src/server/middleware/website.jsx","module.exports = require(\"react-native-web\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-native-web\"\n// module id = react-native\n// module chunks = 0"],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAPA;AACA;AAgBA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAFA;AACA;AAWA;AAAA;AAAA;AAvCA;AAAA;AAAA;AACA;AADA;AACA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AAvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;;;;;;;ACxHA;;;;A","sourceRoot":""}